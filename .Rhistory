Xbar[i,] <- colMeans(xi)
Ybar[i] <- mean(yi)
y_sample[indexy==i] <- y_samplei
x_sample[indexy==i,] <- x_samplei
wts[indexy==i] <- N[i]/ni[i]  ### sampling weights
}
dat_sample <- as.data.frame(cbind(rep(1:m, ni),y_sample, x_sample))
colnames(dat_sample) <- c("indexy","y","x1","x2") # indexy is area information
#### traditional model and the model in sae package
res_reg <- estSAE_reg(area = indexy, y = y_sample, x = cbind(1,x_sample),
Xbar = cbind(1, Xbar),wts = wts, N = N)
Yhat_reg <- res_reg$SR
res0 <- eblupBHF(y~x1+x2,dom = indexy, meanxpop = cbind(1:m, Xbar),
popnsize = cbind(1:m,N), data = dat_sample)
Yhat_bhf <- res0$eblup$eblup ###  BHF model
##### proposed approaches
lamvec1 <- seq(0.05,1,length.out = 50)
lamvec2 <- seq(0.05,1,length.out = 50)
lamvec3 <- seq(0.05,1,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res2 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "creg",lambda = lamvec2)
res3 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "ccreg",lambda = lamvec1, group = c(1,2,3))
clusterls0[[b]] <- cluster
clusterls1[[b]] <- res1$cluster
clusterls2[[b]] <- res2$cluster
clusterls3[[b]] <- res3$cluster
Ybar_mat[,b] <- Ybar
Ybarhat_reg_mat[,b] <- as.numeric(Yhat_reg)
Ybarhat_bhf_mat[,b] <- as.numeric(Yhat_bhf)
Ybarhat1_mat[,b] <- as.numeric(res1$estY)
Ybarhat2_mat[,b] <- as.numeric(res2$estY)
Ybarhat3_mat[,b] <- as.numeric(res3$estY)
print(b)
}
####### Scenario 1 defined with parameter sig_v = 0.5 in SRS ######
## simulated data from linear mixed model ###
library(sae)
library(SAESLCC)
library(tidyverse)
# parameters
sig_ep <- 0.5  ## standard deviation
sig_v <- 0.5 ### standard deviation
eta <- c(5,1,0.5) # intercept + two covariates
mux <- 5
m <- 100
####### repeat B times #####
B <- 100
Ybar_mat <-  matrix(0, m, B) # true Ybar
Ybarhat_reg_mat <- matrix(0, m, B)#reg
Ybarhat_bhf_mat <- matrix(0, m, B)#bhf
Ybarhat1_mat <- matrix(0, m, B)# newEstimator1
Ybarhat2_mat <- matrix(0, m, B) # newEstimator2
Ybarhat3_mat <- matrix(0, m, B) # newEstimator3
clusterls1 <- list()
clusterls2 <- list()
clusterls3 <- list()
for(b in 1:B)
{
set.seed(1234 + b)
N <- sample(100:400,m, replace = TRUE)  ## population size in each area
ni <- round(0.1*N)
N0 <- sum(ni)
### sample data from linear mixed model and then use SRS to select sample###
indexy <- rep(1:m, ni) ## index of areas
y_sample <- rep(0, N0)
x_sample <- matrix(0, N0,2)
Xbar <- matrix(0, m, 2)
Ybar <- rep(0,m)
wts <- rep(0,m) ## sampling weights
vi <- rnorm(m)*sig_v ## random effects
for(i in 1:m)
{
### generate population
xi <- matrix(mux + rnorm(N[i]*2),nrow = N[i])
yi <- cbind(1,xi) %*% eta + vi[i] + sig_ep*rnorm(N[i])
# sampled
indexi <- sample(N[i],ni[i], replace = FALSE) # sample index, SRSWOR
y_samplei <- yi[indexi]
x_samplei <- xi[indexi,]
Xbar[i,] <- colMeans(xi)
Ybar[i] <- mean(yi)
y_sample[indexy==i] <- y_samplei
x_sample[indexy==i,] <- x_samplei
wts[indexy==i] <- N[i]/ni[i]  ### sampling weights
}
dat_sample <- as.data.frame(cbind(rep(1:m, ni),y_sample, x_sample))
colnames(dat_sample) <- c("indexy","y","x1","x2") # indexy is area information
#### traditional model and the model in sae package
res_reg <- estSAE_reg(area = indexy, y = y_sample, x = cbind(1,x_sample),
Xbar = cbind(1, Xbar),wts = wts, N = N)
Yhat_reg <- res_reg$SR
res0 <- eblupBHF(y~x1+x2,dom = indexy, meanxpop = cbind(1:m, Xbar),
popnsize = cbind(1:m,N), data = dat_sample)
Yhat_bhf <- res0$eblup$eblup ###  BHF model
##### proposed approaches
lamvec1 <- seq(0.05,1,length.out = 50)
lamvec2 <- seq(0.05,1,length.out = 50)
lamvec3 <- seq(0.05,1,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res2 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "creg",lambda = lamvec2)
res3 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "ccreg",lambda = lamvec1, group = c(1,2,3))
clusterls1[[b]] <- res1$cluster
clusterls2[[b]] <- res2$cluster
clusterls3[[b]] <- res3$cluster
Ybar_mat[,b] <- Ybar
Ybarhat_reg_mat[,b] <- as.numeric(Yhat_reg)
Ybarhat_bhf_mat[,b] <- as.numeric(Yhat_bhf)
Ybarhat1_mat[,b] <- as.numeric(res1$estY)
Ybarhat2_mat[,b] <- as.numeric(res2$estY)
Ybarhat3_mat[,b] <- as.numeric(res3$estY)
print(b)
}
save(Ybar_mat, Ybarhat_reg_mat, Ybarhat_bhf_mat,
Ybarhat1_mat,Ybarhat2_mat,Ybarhat3_mat,
clusterls0,clusterls1,clusterls2,clusterls3,
file = "result/s1_SRS_p2.RData")
save(Ybar_mat, Ybarhat_reg_mat, Ybarhat_bhf_mat,
Ybarhat1_mat,Ybarhat2_mat,Ybarhat3_mat,
clusterls1,clusterls2,clusterls3,
file = "result/s1_SRS_p2.RData")
rmse_reg <- sqrt(rowMeans((Ybarhat_reg_mat - Ybar_mat)^2))
rmse_bhf <- sqrt(rowMeans((Ybarhat_bhf_mat - Ybar_mat)^2))
rmse_m1 <- sqrt(rowMeans((Ybarhat1_mat - Ybar_mat)^2))
rmse_m2 <- sqrt(rowMeans((Ybarhat2_mat - Ybar_mat)^2))
rmse_m3 <- sqrt(rowMeans((Ybarhat3_mat- Ybar_mat)^2))
boxplot(rmse_bhf,
rmse_reg,
rmse_m1,
rmse_m2,
rmse_m3)
rrmse_reg <- sqrt(rowMeans((Ybarhat_reg_mat/Ybar_mat - 1)^2))
rrmse_bhf <- sqrt(rowMeans((Ybarhat_bhf_mat/Ybar_mat - 1)^2))
rrmse_m1 <- sqrt(rowMeans((Ybarhat1_mat/Ybar_mat - 1)^2))
rrmse_m2 <- sqrt(rowMeans((Ybarhat2_mat/Ybar_mat - 1)^2))
rrmse_m3 <- sqrt(rowMeans((Ybarhat3_mat/Ybar_mat - 1)^2))
boxplot(rrmse_bhf,
rrmse_reg,
rrmse_m1,
rrmse_m2,
rrmse_m3)
####### Scenario 1 defined with parameter sig_v = 0.2 in SRS ######
## simulated data from linear mixed model ###
library(sae)
library(SAESLCC)
library(tidyverse)
# parameters
sig_ep <- 0.5  ## standard deviation
sig_v <- 0.3 ### standard deviation
eta <- c(5,1,0.5) # intercept + two covariates
mux <- 5
m <- 100
####### repeat B times #####
B <- 100
Ybar_mat <-  matrix(0, m, B) # true Ybar
Ybarhat_reg_mat <- matrix(0, m, B)#reg
Ybarhat_bhf_mat <- matrix(0, m, B)#bhf
Ybarhat1_mat <- matrix(0, m, B)# newEstimator1
Ybarhat2_mat <- matrix(0, m, B) # newEstimator2
Ybarhat3_mat <- matrix(0, m, B) # newEstimator3
clusterls1 <- list()
clusterls2 <- list()
clusterls3 <- list()
for(b in 1:B)
{
set.seed(1234 + b)
N <- sample(100:400,m, replace = TRUE)  ## population size in each area
ni <- round(0.1*N)
N0 <- sum(ni)
### sample data from linear mixed model and then use SRS to select sample###
indexy <- rep(1:m, ni) ## index of areas
y_sample <- rep(0, N0)
x_sample <- matrix(0, N0,2)
Xbar <- matrix(0, m, 2)
Ybar <- rep(0,m)
wts <- rep(0,m) ## sampling weights
vi <- rnorm(m)*sig_v ## random effects
for(i in 1:m)
{
### generate population
xi <- matrix(mux + rnorm(N[i]*2),nrow = N[i])
yi <- cbind(1,xi) %*% eta + vi[i] + sig_ep*rnorm(N[i])
# sampled
indexi <- sample(N[i],ni[i], replace = FALSE) # sample index, SRSWOR
y_samplei <- yi[indexi]
x_samplei <- xi[indexi,]
Xbar[i,] <- colMeans(xi)
Ybar[i] <- mean(yi)
y_sample[indexy==i] <- y_samplei
x_sample[indexy==i,] <- x_samplei
wts[indexy==i] <- N[i]/ni[i]  ### sampling weights
}
dat_sample <- as.data.frame(cbind(rep(1:m, ni),y_sample, x_sample))
colnames(dat_sample) <- c("indexy","y","x1","x2") # indexy is area information
#### traditional model and the model in sae package
res_reg <- estSAE_reg(area = indexy, y = y_sample, x = cbind(1,x_sample),
Xbar = cbind(1, Xbar),wts = wts, N = N)
Yhat_reg <- res_reg$SR
res0 <- eblupBHF(y~x1+x2,dom = indexy, meanxpop = cbind(1:m, Xbar),
popnsize = cbind(1:m,N), data = dat_sample)
Yhat_bhf <- res0$eblup$eblup ###  BHF model
##### proposed approaches
lamvec1 <- seq(0.05,1,length.out = 50)
lamvec2 <- seq(0.05,1,length.out = 50)
lamvec3 <- seq(0.05,1,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res2 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "creg",lambda = lamvec2)
res3 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "ccreg",lambda = lamvec1, group = c(1,2,3))
clusterls1[[b]] <- res1$cluster
clusterls2[[b]] <- res2$cluster
clusterls3[[b]] <- res3$cluster
Ybar_mat[,b] <- Ybar
Ybarhat_reg_mat[,b] <- as.numeric(Yhat_reg)
Ybarhat_bhf_mat[,b] <- as.numeric(Yhat_bhf)
Ybarhat1_mat[,b] <- as.numeric(res1$estY)
Ybarhat2_mat[,b] <- as.numeric(res2$estY)
Ybarhat3_mat[,b] <- as.numeric(res3$estY)
print(b)
}
save(Ybar_mat, Ybarhat_reg_mat, Ybarhat_bhf_mat,
Ybarhat1_mat,Ybarhat2_mat,Ybarhat3_mat,
clusterls0,clusterls1,clusterls2,clusterls3,
file = "result/s1_SRS_p3.RData")
save(Ybar_mat, Ybarhat_reg_mat, Ybarhat_bhf_mat,
Ybarhat1_mat,Ybarhat2_mat,Ybarhat3_mat,
clusterls1,clusterls2,clusterls3,
file = "result/s1_SRS_p3.RData")
rmse_reg <- sqrt(rowMeans((Ybarhat_reg_mat - Ybar_mat)^2))
rmse_bhf <- sqrt(rowMeans((Ybarhat_bhf_mat - Ybar_mat)^2))
rmse_m1 <- sqrt(rowMeans((Ybarhat1_mat - Ybar_mat)^2))
rmse_m2 <- sqrt(rowMeans((Ybarhat2_mat - Ybar_mat)^2))
rmse_m3 <- sqrt(rowMeans((Ybarhat3_mat- Ybar_mat)^2))
boxplot(rmse_reg,
rmse_bhf,
rmse_m1,
rmse_m2,
rmse_m3)
rrmse_reg <- sqrt(rowMeans((Ybarhat_reg_mat/Ybar_mat - 1)^2))
rrmse_bhf <- sqrt(rowMeans((Ybarhat_bhf_mat/Ybar_mat - 1)^2))
rrmse_m1 <- sqrt(rowMeans((Ybarhat1_mat/Ybar_mat - 1)^2))
rrmse_m2 <- sqrt(rowMeans((Ybarhat2_mat/Ybar_mat - 1)^2))
rrmse_m3 <- sqrt(rowMeans((Ybarhat3_mat/Ybar_mat - 1)^2))
boxplot(rrmse_reg,
rrmse_bhf,
rrmse_m1,
rrmse_m2,
rrmse_m3)
####### Scenario 3 first case ######
#eta1 <- c(-0.5,0.5) # two possible values for beta1
#eta2 <- c(-0.5,0.5) # two possible values for beta2
#eta3 <- matrix(c(0.5,0.5, 1.5,1.5), ncol=2) ## two possible vectors for beta3
# simulate model from model 3
library(sae)
library(SAESLCC)
library(tidyverse)
library(sampling)
sig_ep <- 0.5  ## standard deviation
#### should use different groups for different coordinates
eta1 <- c(-0.5,0.5) # two possible values for beta1
eta2 <- c(-0.5,0.5) # two possible values for beta2
eta3 <- matrix(c(0.5,0.5, 1.5,1.5), ncol=2) ## two possible vectors for beta3
m <- 100
####### below is for one sample #####
ni <- rep(10,m)
N0 <- sum(ni)
B <- 100
Ybar_mat <-  matrix(0, m, B) # true Ybar
Ybarhat_reg_mat <- matrix(0, m, B) #reg
Ybarhat_bhf_mat <- matrix(0, m, B) #bhf
Ybarhat1_mat <- matrix(0, m, B) # newEstimator1
Ybarhat2_mat <- matrix(0, m, B) # newEstimator2
Ybarhat3_mat <- matrix(0, m, B) # newEstimator3
clusterls1 <- list()
clusterls2 <- list()
clusterls3 <- list()
clusterls0 <- list()
b
N <- sample(100:400,m, replace = TRUE)  ## population size in each area
### sample data from linear mixed model and then use SRS to select sample###
indexy <- rep(1:m, ni) ## index of areas
y_sample <- rep(0, N0)
x_sample <- matrix(0, N0,3)
Xbar <- matrix(0, m, 3)
Ybar <- rep(0,m)
wts <- rep(0,m) ## sampling weights
cluster = matrix(sample(1:2, m*3,replace = TRUE), nrow=m) ### should be a matrix for beta1, beta2, and beta3
for(i in 1:m)
{
# generate population
xi <- matrix(rnorm(N[i]*3),nrow = N[i], ncol = 3) #### different x not same repeated
# we just have two different clusters
eta <- c(eta1[cluster[i,1]], eta2[cluster[i,2]], eta3[,cluster[i,3]])
yi <- cbind(1,xi) %*% eta + sig_ep*rnorm(N[i])
### use the first column
indexi <- sample(N[i],ni[i], replace = FALSE)
y_samplei <- yi[indexi]
x_samplei <- xi[indexi,]
Xbar[i,] <- colMeans(xi)
Ybar[i] <- mean(yi)
y_sample[indexy==i] <- y_samplei
x_sample[indexy==i,] <- x_samplei
wts[indexy==i] <- N[i]/ni[i]  ### sampling weights
}
y_sample
mux <- 5
cluster = matrix(sample(1:2, m*3,replace = TRUE), nrow=m) ### should be a matrix for beta1, beta2, and beta3
for(i in 1:m)
{
# generate population
xi <- matrix(rnorm(N[i]*3)+mux,nrow = N[i], ncol = 3) #### different x not same repeated
# we just have two different clusters
eta <- c(eta1[cluster[i,1]], eta2[cluster[i,2]], eta3[,cluster[i,3]])
yi <- cbind(1,xi) %*% eta + sig_ep*rnorm(N[i])
### use the first column
indexi <- sample(N[i],ni[i], replace = FALSE)
y_samplei <- yi[indexi]
x_samplei <- xi[indexi,]
Xbar[i,] <- colMeans(xi)
Ybar[i] <- mean(yi)
y_sample[indexy==i] <- y_samplei
x_sample[indexy==i,] <- x_samplei
wts[indexy==i] <- N[i]/ni[i]  ### sampling weights
}
y_sample
Ybar
dat_sample <- as.data.frame(cbind(rep(1:m, ni),y_sample, z_sample))
colnames(dat_sample) <- c("indexy","y","x1","x2","x3") # indexy is area information
res_reg <- estSAE_reg(area = indexy, y = y_sample, x = cbind(1,x_sample),
Xbar = cbind(1, Xbar),wts = wts, N = N)
dat_sample <- as.data.frame(cbind(rep(1:m, ni),y_sample, x_sample))
colnames(dat_sample) <- c("indexy","y","x1","x2","x3") # indexy is area information
res_reg <- estSAE_reg(area = indexy, y = y_sample, x = cbind(1,x_sample),
Xbar = cbind(1, Xbar),wts = wts, N = N)
Yhat_reg <- res_reg$SR
plot(Yhat_reg, Ybar)
res0 <- eblupBHF(y~x1+x2+x3,dom = indexy, meanxpop = cbind(1:m, Xbar),
popnsize = cbind(1:m,N), data = dat_sample)
Yhat_bhf <- res0$eblup$eblup ###  bhf model
plot(Yhat_bhf, Ybar)
##### proposed approaches
lamvec1 <- seq(0.01,0.5,length.out = 50)
lamvec2 <- seq(0.01,0.5,length.out = 50)
lamvec3 <- seq(0.01,0.5,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res1$BICm
seq(0.01,0.5,length.out = 50)[3]
##### proposed approaches
lamvec1 <- seq(0.03,0.5,length.out = 50)
lamvec2 <- seq(0.01,0.5,length.out = 50)
lamvec3 <- seq(0.01,0.5,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res1$BICm
##### proposed approaches
lamvec1 <- seq(0.03,0.5,length.out = 50)
lamvec2 <- seq(0.03,0.5,length.out = 50)
lamvec3 <- seq(0.03,0.5,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res2 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "creg",lambda = lamvec2)
res3 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "ccreg",lambda = lamvec1, group = c(1,2))
res3 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "ccreg",lambda = lamvec1, group = c(1,2,3,3))
res2$BICm
lamvec2 <- seq(0.05,0.5,length.out = 50)
res2 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "creg",lambda = lamvec2)
res2$BICm
res3$BICm
library(flexclust)
randIndex(cluste[,1], res3$cluster[,1])
randIndex(cluste[,1], res3$cluster[,1])
cluster
randIndex(cluster[,1], res3$cluster[,1])
randIndex(cluster[,2], res3$cluster[,2])
randIndex(cluster[,3], res3$cluster[,3])
####### Scenario 3 first case ######
#eta1 <- c(-0.5,0.5) # two possible values for beta1
#eta2 <- c(-0.5,0.5) # two possible values for beta2
#eta3 <- matrix(c(0.5,0.5, 1.5,1.5), ncol=2) ## two possible vectors for beta3
# simulate model from model 3
library(sae)
library(SAESLCC)
library(tidyverse)
library(sampling)
sig_ep <- 0.5  ## standard deviation
mux <- 5
#### should use different groups for different coordinates
eta1 <- c(-0.5,0.5) # two possible values for beta1
eta2 <- c(-0.5,0.5) # two possible values for beta2
eta3 <- matrix(c(0.5,0.5, 1.5,1.5), ncol=2) ## two possible vectors for beta3
m <- 100
####### below is for one sample #####
ni <- rep(10,m)
N0 <- sum(ni)
B <- 50
Ybar_mat <-  matrix(0, m, B) # true Ybar
Ybarhat_reg_mat <- matrix(0, m, B) #reg
Ybarhat_bhf_mat <- matrix(0, m, B) #bhf
Ybarhat1_mat <- matrix(0, m, B) # newEstimator1
Ybarhat2_mat <- matrix(0, m, B) # newEstimator2
Ybarhat3_mat <- matrix(0, m, B) # newEstimator3
clusterls1 <- list()
clusterls2 <- list()
clusterls3 <- list()
clusterls0 <- list()
for(b in 1:B)
{
set.seed(1234 + b)
N <- sample(100:400,m, replace = TRUE)  ## population size in each area
### sample data from linear mixed model and then use SRS to select sample###
indexy <- rep(1:m, ni) ## index of areas
y_sample <- rep(0, N0)
x_sample <- matrix(0, N0,3)
Xbar <- matrix(0, m, 3)
Ybar <- rep(0,m)
wts <- rep(0,m) ## sampling weights
cluster = matrix(sample(1:2, m*3,replace = TRUE), nrow=m) ### should be a matrix for beta1, beta2, and beta3
for(i in 1:m)
{
# generate population
xi <- matrix(rnorm(N[i]*3)+mux,nrow = N[i], ncol = 3) #### different x not same repeated
# we just have two different clusters
eta <- c(eta1[cluster[i,1]], eta2[cluster[i,2]], eta3[,cluster[i,3]])
yi <- cbind(1,xi) %*% eta + sig_ep*rnorm(N[i])
### use the first column
indexi <- sample(N[i],ni[i], replace = FALSE)
y_samplei <- yi[indexi]
x_samplei <- xi[indexi,]
Xbar[i,] <- colMeans(xi)
Ybar[i] <- mean(yi)
y_sample[indexy==i] <- y_samplei
x_sample[indexy==i,] <- x_samplei
wts[indexy==i] <- N[i]/ni[i]  ### sampling weights
}
dat_sample <- as.data.frame(cbind(rep(1:m, ni),y_sample, x_sample))
colnames(dat_sample) <- c("indexy","y","x1","x2","x3") # indexy is area information
res_reg <- estSAE_reg(area = indexy, y = y_sample, x = cbind(1,x_sample),
Xbar = cbind(1, Xbar),wts = wts, N = N)
Yhat_reg <- res_reg$SR
res0 <- eblupBHF(y~x1+x2+x3,dom = indexy, meanxpop = cbind(1:m, Xbar),
popnsize = cbind(1:m,N), data = dat_sample)
Yhat_bhf <- res0$eblup$eblup ###  bhf model
##### proposed approaches
lamvec1 <- seq(0.03,0.5,length.out = 50)
lamvec2 <- seq(0.05,0.5,length.out = 50)
lamvec3 <- seq(0.03,0.5,length.out = 50)
res1 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "intercept",lambda = lamvec1)
res2 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "creg",lambda = lamvec2)
res3 <- SLCC_SR(area = indexy, y = y_sample, x = x_sample,Xbar = Xbar,
wts = wts, N = N, model = "ccreg",lambda = lamvec1, group = c(1,2,3,3))
clusterls0[[b]] <- cluster
clusterls1[[b]] <- res1$cluster
clusterls2[[b]] <- res2$cluster
clusterls3[[b]] <- res3$cluster
Ybar_mat[,b] <- Ybar
Ybarhat_reg_mat[,b] <- as.numeric(Yhat_reg)
Ybarhat_bhf_mat[,b] <- as.numeric(Yhat_bhf)
Ybarhat1_mat[,b] <- as.numeric(res1$estY)
Ybarhat2_mat[,b] <- as.numeric(res2$estY)
Ybarhat3_mat[,b] <- as.numeric(res3$estY)
print(b)
}
rmse_reg <- sqrt(rowMeans((Ybarhat_reg_mat - Ybar_mat)^2))
rmse_bhf <- sqrt(rowMeans((Ybarhat_bhf_mat - Ybar_mat)^2))
rmse_m1 <- sqrt(rowMeans((Ybarhat1_mat - Ybar_mat)^2))
rmse_m2 <- sqrt(rowMeans((Ybarhat2_mat - Ybar_mat)^2))
rmse_m3 <- sqrt(rowMeans((Ybarhat3_mat- Ybar_mat)^2))
boxplot(rmse_reg,
rmse_bhf,
rmse_m1,
rmse_m2,
rmse_m3)
rrmse_reg <- sqrt(rowMeans((Ybarhat_reg_mat/Ybar_mat - 1)^2))
rrmse_bhf <- sqrt(rowMeans((Ybarhat_bhf_mat/Ybar_mat - 1)^2))
rrmse_m1 <- sqrt(rowMeans((Ybarhat1_mat/Ybar_mat - 1)^2))
rrmse_m2 <- sqrt(rowMeans((Ybarhat2_mat/Ybar_mat - 1)^2))
rrmse_m3 <- sqrt(rowMeans((Ybarhat3_mat/Ybar_mat - 1)^2))
boxplot(rrmse_reg,
rrmse_bhf,
rrmse_m1,
rrmse_m2,
rrmse_m3)
clusterls3[[1]]
clusterls2[[1]]
cluster
?standiize
?standardize
library(roxygen2)
setwd("~/Research_working/SLCC_SAE/SAESLCC")
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
